// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectArti.Api.Data;

#nullable disable

namespace ProjectArti.Api.Migrations
{
    [DbContext(typeof(My_dbContext))]
    [Migration("20241031224830_InitialCreate2")]
    partial class InitialCreate2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AvailableStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateListed")
                        .HasColumnType("datetime2");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("SpecialOffers")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("AvailableStatus");
                });

            modelBuilder.Entity("Balcony", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BalconySize")
                        .HasColumnType("int");

                    b.Property<string>("View")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Balcony");
                });

            modelBuilder.Entity("CommercialType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OfficeSpaces")
                        .HasColumnType("int");

                    b.Property<int>("RetailSpaces")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CommercialType");
                });

            modelBuilder.Entity("FloorType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BalconyId")
                        .HasColumnType("int");

                    b.Property<int?>("CommercialTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("FloorNumber")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("GarageId")
                        .HasColumnType("int");

                    b.Property<int?>("GardenTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("GymTopId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsCommercial")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<bool?>("IsResidential")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<int?>("MeetingRoomId")
                        .HasColumnType("int");

                    b.Property<int?>("ParkingId")
                        .HasColumnType("int");

                    b.Property<int?>("RecreationalAreaId")
                        .HasColumnType("int");

                    b.Property<int?>("SwimmingPoolTId")
                        .HasColumnType("int");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("BalconyId");

                    b.HasIndex("CommercialTypeId");

                    b.HasIndex("GarageId");

                    b.HasIndex("GardenTypeId");

                    b.HasIndex("GymTopId");

                    b.HasIndex("MeetingRoomId");

                    b.HasIndex("ParkingId");

                    b.HasIndex("RecreationalAreaId");

                    b.HasIndex("SwimmingPoolTId");

                    b.ToTable("FloorType");
                });

            modelBuilder.Entity("Garage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("GarageSize")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Garage");
                });

            modelBuilder.Entity("GardenType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GardenSize")
                        .HasColumnType("int");

                    b.Property<string>("IrrigationSystem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlantTypes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("Playground")
                        .HasColumnType("bit");

                    b.Property<string>("SeatingArea")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("GardenType");
                });

            modelBuilder.Entity("GymTop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClassesOffered")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Equipment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("OpeningHours")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PersonalTraining")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("GymTop");
                });

            modelBuilder.Entity("MeetingRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("RoomSize")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MeetingRoom");
                });

            modelBuilder.Entity("Parking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CoveredSpots")
                        .HasColumnType("int");

                    b.Property<int>("TotalSpots")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Parking");
                });

            modelBuilder.Entity("PendingStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpectedCloseDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PendingSince")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReasonForPending")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("PendingStatus");
                });

            modelBuilder.Entity("ProjectArti.Api.Model.Applicant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("BirtDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JobApplicationID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResumeCV")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Skill")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatuApplicant")
                        .HasColumnType("int");

                    b.Property<double>("YearsOfExperience")
                        .HasColumnType("float");

                    b.Property<int>("gender")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyID");

                    b.HasIndex("JobApplicationID");

                    b.ToTable("applicants");
                });

            modelBuilder.Entity("ProjectArti.Api.Model.BaseRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<double?>("Communication")
                        .HasColumnType("float");

                    b.Property<double?>("OverallSatisfaction")
                        .HasColumnType("float");

                    b.Property<double?>("Professionalism")
                        .HasColumnType("float");

                    b.Property<double?>("Quality")
                        .HasColumnType("float");

                    b.Property<double?>("Timeliness")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("BaseRating");
                });

            modelBuilder.Entity("ProjectArti.Api.Model.BusinessType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Industry")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("BusinessType");
                });

            modelBuilder.Entity("ProjectArti.Api.Model.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("BaseRatingID")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirtDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CraftsmanID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PropertyID")
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Skill")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TaskID")
                        .HasColumnType("int");

                    b.Property<int?>("UnitID")
                        .HasColumnType("int");

                    b.Property<double>("YearsOfExperience")
                        .HasColumnType("float");

                    b.Property<int>("gender")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BaseRatingID");

                    b.HasIndex("CraftsmanID");

                    b.HasIndex("PropertyID");

                    b.HasIndex("TaskID");

                    b.HasIndex("UnitID");

                    b.ToTable("clients");
                });

            modelBuilder.Entity("ProjectArti.Api.Model.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BusinessTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EstablishedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessTypeID");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("ProjectArti.Api.Model.Craftsman", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("BirtDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CompanyID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Skill")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("YearsOfExperience")
                        .HasColumnType("float");

                    b.Property<int>("gender")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyID");

                    b.ToTable("craftsmens");
                });

            modelBuilder.Entity("ProjectArti.Api.Model.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("BasicSalary")
                        .HasColumnType("float");

                    b.Property<DateTime>("BirtDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Skill")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("YearsOfExperience")
                        .HasColumnType("float");

                    b.Property<string>("gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyID");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("ProjectArti.Api.Model.JobApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ResumeCV")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatuApplicant")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyID");

                    b.ToTable("jobApplications");
                });

            modelBuilder.Entity("ProjectArti.Api.Model.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("BirtDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ClientID")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyID")
                        .HasColumnType("int");

                    b.Property<int?>("CraftsmanID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Skill")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("YearsOfExperience")
                        .HasColumnType("float");

                    b.Property<int>("gender")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientID");

                    b.HasIndex("CompanyID");

                    b.HasIndex("CraftsmanID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("profiles");
                });

            modelBuilder.Entity("ProjectArti.Api.Model.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PropertyStatusId")
                        .HasColumnType("int");

                    b.Property<int>("PropertyTypeId")
                        .HasColumnType("int");

                    b.Property<string>("UnitSize")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PropertyStatusId");

                    b.HasIndex("PropertyTypeId");

                    b.ToTable("properties");
                });

            modelBuilder.Entity("ProjectArti.Api.Model.PropertyStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AvailableStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("PendingStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("RentedStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("SoldStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("UnderRenovationStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AvailableStatusId");

                    b.HasIndex("PendingStatusId");

                    b.HasIndex("RentedStatusId");

                    b.HasIndex("SoldStatusId");

                    b.HasIndex("UnderRenovationStatusId");

                    b.ToTable("PropertyStatus");
                });

            modelBuilder.Entity("ProjectArti.Api.Model.PropertyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Balcony")
                        .HasColumnType("bit");

                    b.Property<int>("Bathrooms")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Features")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Floor")
                        .HasMaxLength(200)
                        .HasColumnType("int");

                    b.Property<int>("FloorTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ImagesUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<int>("YearBuilt")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FloorTypeId");

                    b.ToTable("PropertyType");
                });

            modelBuilder.Entity("ProjectArti.Api.Model.RequestClient", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("ClientID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("statusRequest")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("ClientID");

                    b.ToTable("requestClients");
                });

            modelBuilder.Entity("ProjectArti.Api.Model.TaskArti", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<int?>("CraftsmanID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("endTask")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("startTask")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyID");

                    b.HasIndex("CraftsmanID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("taskArtis");
                });

            modelBuilder.Entity("ProjectArti.Api.Model.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyID")
                        .HasColumnType("int");

                    b.Property<double>("Location")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("UnitSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyID");

                    b.ToTable("units", (string)null);

                    b.HasDiscriminator<string>("Type").HasValue("Unit");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("RecreationalArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaSize")
                        .HasColumnType("int");

                    b.Property<string>("PicnicArea")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Playground")
                        .HasColumnType("bit");

                    b.Property<string>("TypesOfActivities")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("RecreationalArea");
                });

            modelBuilder.Entity("RentedStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("MonthlyRent")
                        .HasColumnType("float");

                    b.Property<DateTime>("RentalEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RentalStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("RentedStatus");
                });

            modelBuilder.Entity("SoldStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("SalePrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("SoldStatus");
                });

            modelBuilder.Entity("SwimmingPoolT", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Depth")
                        .HasColumnType("int");

                    b.Property<int>("PoolSize")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SwimmingPoolT");
                });

            modelBuilder.Entity("UnderRenovationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpectedCompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RenovationStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("UnderRenovationStatus");
                });

            modelBuilder.Entity("ProjectArti.Api.Model.Apartment", b =>
                {
                    b.HasBaseType("ProjectArti.Api.Model.Unit");

                    b.HasDiscriminator().HasValue("Apartment");
                });

            modelBuilder.Entity("ProjectArti.Api.Model.House", b =>
                {
                    b.HasBaseType("ProjectArti.Api.Model.Unit");

                    b.HasDiscriminator().HasValue("House");
                });

            modelBuilder.Entity("ProjectArti.Api.Model.Office", b =>
                {
                    b.HasBaseType("ProjectArti.Api.Model.Unit");

                    b.HasDiscriminator().HasValue("Office");
                });

            modelBuilder.Entity("FloorType", b =>
                {
                    b.HasOne("Balcony", "balcony")
                        .WithMany()
                        .HasForeignKey("BalconyId");

                    b.HasOne("CommercialType", "commercialType")
                        .WithMany()
                        .HasForeignKey("CommercialTypeId");

                    b.HasOne("Garage", "garage")
                        .WithMany()
                        .HasForeignKey("GarageId");

                    b.HasOne("GardenType", "gardenType")
                        .WithMany()
                        .HasForeignKey("GardenTypeId");

                    b.HasOne("GymTop", "gymTop")
                        .WithMany()
                        .HasForeignKey("GymTopId");

                    b.HasOne("MeetingRoom", "meetingRoom")
                        .WithMany()
                        .HasForeignKey("MeetingRoomId");

                    b.HasOne("Parking", "parking")
                        .WithMany()
                        .HasForeignKey("ParkingId");

                    b.HasOne("RecreationalArea", "recreationalArea")
                        .WithMany()
                        .HasForeignKey("RecreationalAreaId");

                    b.HasOne("SwimmingPoolT", "swimmingPoolT")
                        .WithMany()
                        .HasForeignKey("SwimmingPoolTId");

                    b.Navigation("balcony");

                    b.Navigation("commercialType");

                    b.Navigation("garage");

                    b.Navigation("gardenType");

                    b.Navigation("gymTop");

                    b.Navigation("meetingRoom");

                    b.Navigation("parking");

                    b.Navigation("recreationalArea");

                    b.Navigation("swimmingPoolT");
                });

            modelBuilder.Entity("ProjectArti.Api.Model.Applicant", b =>
                {
                    b.HasOne("ProjectArti.Api.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectArti.Api.Model.JobApplication", "jobApplication")
                        .WithMany()
                        .HasForeignKey("JobApplicationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("jobApplication");
                });

            modelBuilder.Entity("ProjectArti.Api.Model.Client", b =>
                {
                    b.HasOne("ProjectArti.Api.Model.BaseRating", "baseRating")
                        .WithMany()
                        .HasForeignKey("BaseRatingID");

                    b.HasOne("ProjectArti.Api.Model.Craftsman", "craftsman")
                        .WithMany()
                        .HasForeignKey("CraftsmanID");

                    b.HasOne("ProjectArti.Api.Model.Property", "property")
                        .WithMany()
                        .HasForeignKey("PropertyID");

                    b.HasOne("ProjectArti.Api.Model.TaskArti", "task")
                        .WithMany()
                        .HasForeignKey("TaskID");

                    b.HasOne("ProjectArti.Api.Model.Unit", "unit")
                        .WithMany()
                        .HasForeignKey("UnitID");

                    b.Navigation("baseRating");

                    b.Navigation("craftsman");

                    b.Navigation("property");

                    b.Navigation("task");

                    b.Navigation("unit");
                });

            modelBuilder.Entity("ProjectArti.Api.Model.Company", b =>
                {
                    b.HasOne("ProjectArti.Api.Model.BusinessType", "businessType")
                        .WithMany()
                        .HasForeignKey("BusinessTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("businessType");
                });

            modelBuilder.Entity("ProjectArti.Api.Model.Craftsman", b =>
                {
                    b.HasOne("ProjectArti.Api.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ProjectArti.Api.Model.Employee", b =>
                {
                    b.HasOne("ProjectArti.Api.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ProjectArti.Api.Model.JobApplication", b =>
                {
                    b.HasOne("ProjectArti.Api.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ProjectArti.Api.Model.Profile", b =>
                {
                    b.HasOne("ProjectArti.Api.Model.Client", "client")
                        .WithMany()
                        .HasForeignKey("ClientID");

                    b.HasOne("ProjectArti.Api.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID");

                    b.HasOne("ProjectArti.Api.Model.Craftsman", "craftsman")
                        .WithMany()
                        .HasForeignKey("CraftsmanID");

                    b.HasOne("ProjectArti.Api.Model.Employee", "employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID");

                    b.Navigation("Company");

                    b.Navigation("client");

                    b.Navigation("craftsman");

                    b.Navigation("employee");
                });

            modelBuilder.Entity("ProjectArti.Api.Model.Property", b =>
                {
                    b.HasOne("ProjectArti.Api.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectArti.Api.Model.PropertyStatus", "PropertyStatus")
                        .WithMany()
                        .HasForeignKey("PropertyStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectArti.Api.Model.PropertyType", "propertyType")
                        .WithMany()
                        .HasForeignKey("PropertyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("PropertyStatus");

                    b.Navigation("propertyType");
                });

            modelBuilder.Entity("ProjectArti.Api.Model.PropertyStatus", b =>
                {
                    b.HasOne("AvailableStatus", "AvailableStatus")
                        .WithMany()
                        .HasForeignKey("AvailableStatusId");

                    b.HasOne("PendingStatus", "PendingStatus")
                        .WithMany()
                        .HasForeignKey("PendingStatusId");

                    b.HasOne("RentedStatus", "RentedStatus")
                        .WithMany()
                        .HasForeignKey("RentedStatusId");

                    b.HasOne("SoldStatus", "SoldStatus")
                        .WithMany()
                        .HasForeignKey("SoldStatusId");

                    b.HasOne("UnderRenovationStatus", "UnderRenovationStatus")
                        .WithMany()
                        .HasForeignKey("UnderRenovationStatusId");

                    b.Navigation("AvailableStatus");

                    b.Navigation("PendingStatus");

                    b.Navigation("RentedStatus");

                    b.Navigation("SoldStatus");

                    b.Navigation("UnderRenovationStatus");
                });

            modelBuilder.Entity("ProjectArti.Api.Model.PropertyType", b =>
                {
                    b.HasOne("FloorType", "floorType")
                        .WithMany()
                        .HasForeignKey("FloorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("floorType");
                });

            modelBuilder.Entity("ProjectArti.Api.Model.RequestClient", b =>
                {
                    b.HasOne("ProjectArti.Api.Model.Client", "client")
                        .WithMany()
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("client");
                });

            modelBuilder.Entity("ProjectArti.Api.Model.TaskArti", b =>
                {
                    b.HasOne("ProjectArti.Api.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectArti.Api.Model.Craftsman", "craftsman")
                        .WithMany()
                        .HasForeignKey("CraftsmanID");

                    b.HasOne("ProjectArti.Api.Model.Employee", "employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID");

                    b.Navigation("Company");

                    b.Navigation("craftsman");

                    b.Navigation("employee");
                });

            modelBuilder.Entity("ProjectArti.Api.Model.Unit", b =>
                {
                    b.HasOne("ProjectArti.Api.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ProjectArti.Api.Model.Apartment", b =>
                {
                    b.OwnsOne("ProjectArti.Api.Model.ApartmentAmentities", "apartmentAmentities", b1 =>
                        {
                            b1.Property<int>("ApartmentId")
                                .HasColumnType("int");

                            b1.Property<int?>("FloorNumber")
                                .IsRequired()
                                .HasColumnType("int")
                                .HasColumnName("FloorNumber");

                            b1.Property<bool?>("HasBalcony")
                                .IsRequired()
                                .HasColumnType("bit")
                                .HasColumnName("HasBalcony");

                            b1.Property<string>("Images")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Images");

                            b1.HasKey("ApartmentId");

                            b1.ToTable("units");

                            b1.WithOwner()
                                .HasForeignKey("ApartmentId");
                        });

                    b.Navigation("apartmentAmentities")
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectArti.Api.Model.House", b =>
                {
                    b.OwnsOne("ProjectArti.Api.Model.HouseAmentities", "houseAmentities", b1 =>
                        {
                            b1.Property<int>("HouseId")
                                .HasColumnType("int");

                            b1.Property<bool?>("HasGarage")
                                .IsRequired()
                                .HasColumnType("bit")
                                .HasColumnName("HasGarage");

                            b1.Property<string>("Images")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Images");

                            b1.Property<int?>("NumberOfBedrooms")
                                .IsRequired()
                                .HasColumnType("int")
                                .HasColumnName("NumberOfBedrooms");

                            b1.Property<int?>("NumberOfFloor")
                                .HasColumnType("int");

                            b1.HasKey("HouseId");

                            b1.ToTable("units");

                            b1.WithOwner()
                                .HasForeignKey("HouseId");
                        });

                    b.Navigation("houseAmentities")
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectArti.Api.Model.Office", b =>
                {
                    b.OwnsOne("ProjectArti.Api.Model.OfficeAmentities", "officeAmentities", b1 =>
                        {
                            b1.Property<int>("OfficeId")
                                .HasColumnType("int");

                            b1.Property<bool?>("HasConferenceRoom")
                                .IsRequired()
                                .HasColumnType("bit")
                                .HasColumnName("HasConferenceRoom");

                            b1.Property<string>("Images")
                                .IsRequired()
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Images");

                            b1.Property<int?>("NumberOfWorkspaces")
                                .IsRequired()
                                .HasColumnType("int")
                                .HasColumnName("NumberOfWorkspaces");

                            b1.HasKey("OfficeId");

                            b1.ToTable("units");

                            b1.WithOwner()
                                .HasForeignKey("OfficeId");
                        });

                    b.Navigation("officeAmentities")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
